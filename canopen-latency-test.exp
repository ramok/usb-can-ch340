#!/bin/sh
# vim: ft=tcl
# the next line restarts using expect \
    exec expect -f "$0" -- "$@"

set dev can0

remove_nulls -d 0
remove_nulls 0
#log_user 0

# NOTE: problems with binary data in stdin/stdout
#   * fconfigure do not help
#   * send_user corrupt binary data, use puts -nonewline
#
# TODO: try it again
#fconfigure stdin  -translation binary -buffering none
#fconfigure stdout -translation binary -buffering none
#stty raw -echo

match_max 2000
set timeout -1

############## start: help function ######################
array set c {
    none  "\033\[0m"
    red   "\033\[0;31m"
    lred  "\033\[1;31m"
    grn   "\033\[0;32m"
    lgrn  "\033\[1;32m"
    yel   "\033\[0;33m"
    lyel  "\033\[1;33m"
    mag   "\033\[0;35m"
    lmag  "\033\[1;35m"
    lblue "\033\[1;36m"
    cyan  "\033\[0;36m"
    white "\033\[1;37m"
}

proc die {msg} {
    upvar c c
    puts stderr "die: $c(lred)$msg$c(none)"
    exit 1
}

#proc fail {msg} {
#    upvar c c
#    puts -nonewline " $c(lred)fail:\n$msg$c(none)"
#    flush stdout
#}
#
#proc warn {msg} {
#    upvar c c
#    puts -nonewline $c(yel)$msg$c(none)
#    flush stdout
#}
#
#proc msg {msg} {
#    upvar c c
#    puts -nonewline $c(cyan)$msg$c(none)
#    flush stdout
#}

# TODO: loglevel
proc msg {type msg} {
    upvar c c
    switch $type {
        fail    {set col $c(lred)}
        warn    {set col $c(lmag)}
        note    {set col $c(lyel)}
        info    {set col $c(cyan)}
        dbg     {set col $c(lmag)}
        norm    {set col {}}
        stage   {
            set col $c(yel)
            set msg "\n====== $msg ======\n"
        }
        default {set col {}}
    }
    puts -nonewline $col$msg$c(none)
    flush stdout
}

proc ok {} {
    upvar c c
    puts " $c(lgrn) ok$c(none)"
}

proc hexdump string {
    binary scan $string H* hex
    regexp -all -inline .. $hex
}

proc beep {} {
    after 0 {
        send_tty "\x07"
        for {set i 0} {$i < 5} {incr i} {
            sleep 1
            send_tty "\x07"
        }
    }
}

proc check_for_following {type} {
    global argv0
    if {![llength [uplevel set argv]]} {
        send_error "$argv0: [uplevel set flag] requires following $type"
        exit 2
    }
}

############## end: help function ######################

proc show_help_and_die {} {
    global argv0 image_types
    send_error "Usage: [regsub .*/ $argv0 {}] \[-h|--help] \[--] \n\
    -h  - this help\n\
    "
    exit 1
}

array set ::opt {
    verbose 0
}

while { [llength $argv] > 0 } {
    set flag [lindex $argv 0]
    if {0 == [regexp "^-" $flag]} break
    set argv [lrange $argv 1 end]
    switch -- $flag {
        #-f   { set opt(file) [lindex $argv 0]; check_for_following string; set argv [lrange $argv 1 end] }
        -v    { set opt(verbose) 1 }
        -h -
        --help { show_help_and_die }
        --    { incr i; break }
        ^-      { die "unknown option: \"$flag\"" }
    }
}

set argv [string trim $argv \{\}]
set argc [llength $argv]

#if {$argc != 1} {
#    show_help_and_die
#}
set state INIT
set node_id 0
set start_timestamp 0

set test_count 10

proc id2nodeid {id} {
    return [expr $id & 0x7f]
}

proc id2type {id} {
    return [expr $id & 0xf80]
}

proc fsm {timestamp id size data} {
    global test_count
    global state node_id c dev
    global start_timestamp
    set oldstate $state

    msg info "timestamp: $timestamp, id: $id, size: $size, data:, $data\n"
    switch $state {
        INIT {
            if {$id == 000} {
                set state WAIT_ID
            }
        }

        WAIT_ID {
            puts ">>>> id: $id <<<<<"
            if {[id2type $id] == 0x700} {
                set node_id [id2nodeid $id]
                msg info "node_id: [format %x $node_id]\n"

                # enter device to operational mode
                can_send {000#0100}

                # send sync
                can_send {080#}

                set state WAIT_REQUEST
            }
            # msg dbg "id: $id, node_id: 0x[format %x [expr $id & 0xff]]\n"
        }

        WAIT_REQUEST {
            if {[id2type $id] == 0x080} {
                set node_id [id2nodeid $id]
                # msg info "sync sended\n"
                set start_timestamp $timestamp
                set state WAIT_REPLAY
            }
        }
        WAIT_REPLAY {
            if {[id2type $id] == 0x180} {
                set node_id [id2nodeid $id]
                msg note "latency: [expr $timestamp - $start_timestamp] us\n"
                incr test_count -1
                if {$test_count == 0} {
                    exit
                }
                # send sync
                can_send {080#}
		 
                set state WAIT_REQUEST
            }
        }

        - {
            msg note "not handled state $state\n"
        }
    }
    if {$oldstate != $state} {
        msg norm "$oldstate => $state\n"
    }
}

proc can_send {data} {
     global dev
     global cannet  
     if {$cannet} {
         exec cansend $dev $data
     } else {
         send -- "$data\n"
     }
}

set cannet 0

if {$cannet} {
	spawn candump -ta -cdx $dev
} else {
	spawn ./canshell.py
	expect {USB-CAN Device ready}
}

# reboot all devices what support :MT
can_send {000#8100}

expect -re {\((\d+)\.(\d+)\).* ([[:xdigit:]]{3}.*) (\[\d\])  *([^\n]+)\n} {
    set timestamp $expect_out(1,string)$expect_out(2,string)
    set id        $expect_out(3,string)
    set size      $expect_out(4,string)
    set data      $expect_out(5,string)

    fsm $timestamp 0x$id $size $data

    exp_continue
} timeout {
    exp_continue
} full_buffer {
    exp_continue
} eof {
}


