#!/bin/sh
# vim: ft=tcl
# the next line restarts using expect \
    exec expect -f "$0" -- "$@"

remove_nulls -d 0
remove_nulls 0

# NOTE: problems with binary data in stdin/stdout
#   * fconfigure do not help
#   * send_user corrupt binary data, use puts -nonewline
#
# TODO: try it again
#fconfigure stdin  -translation binary -buffering none
#fconfigure stdout -translation binary -buffering none
#stty raw -echo

match_max 2000
set timeout -1

############## start: help function ######################
array set c {
    none  "\033\[0m"
    red   "\033\[0;31m"
    lred  "\033\[1;31m"
    grn   "\033\[0;32m"
    lgrn  "\033\[1;32m"
    yel   "\033\[0;33m"
    lyel  "\033\[1;33m"
    mag   "\033\[0;35m"
    lmag  "\033\[1;35m"
    lblue "\033\[1;36m"
    cyan  "\033\[0;36m"
    white "\033\[1;37m"
}

proc die {msg} {
    upvar c c
    puts stderr "die: $c(lred)$msg$c(none)"
    exit 1
}

#proc fail {msg} {
#    upvar c c
#    puts -nonewline " $c(lred)fail:\n$msg$c(none)"
#    flush stdout
#}
#
#proc warn {msg} {
#    upvar c c
#    puts -nonewline $c(yel)$msg$c(none)
#    flush stdout
#}
#
#proc msg {msg} {
#    upvar c c
#    puts -nonewline $c(cyan)$msg$c(none)
#    flush stdout
#}

# TODO: loglevel
proc msg {type msg} {
    upvar c c
    switch $type {
        fail    {set col $c(lred)}
        warn    {set col $c(lmag)}
        note    {set col $c(lyel)}
        info    {set col $c(cyan)}
        dbg     {set col $c(lmag)}
        norm    {set col {}}
        stage   {
            set col $c(yel)
            set msg "\n====== $msg ======\n"
        }
        default {set col {}}
    }
    puts -nonewline $col$msg$c(none)
    flush stdout
}

proc ok {} {
    upvar c c
    puts " $c(lgrn) ok$c(none)"
}

proc hexdump string {
    binary scan $string H* hex
    regexp -all -inline .. $hex
}

proc beep {} {
    after 0 {
        send_tty "\x07"
        for {set i 0} {$i < 5} {incr i} {
            sleep 1
            send_tty "\x07"
        }
    }
}

proc check_for_following {type} {
    global argv0
    if {![llength [uplevel set argv]]} {
        send_error "$argv0: [uplevel set flag] requires following $type"
        exit 2
    }
}

############## end: help function ######################

proc show_help_and_die {} {
    global argv0 image_types
    set prog [regsub .*/ $argv0 {}]
    send_error "Usage: $prog \[-h|--help] -i \[interface_name] \[--] node_id\n\
    -h  - this help\n\
    -i  - set interface name (for ex. can0, /dev/ttyUSB0, regexp-for-searching-ttyUSB, ...)
          without parameter is \"can0\" by default
          for example:
            $prog  -i -- 11     - will use can0
            $prog 11            - will search for CH340 CAN dongle and use it
    node_id - from 10 to 14 (hex, without 0x prefix)
"
    exit 1
}

array set ::opt {
    verbose 0
    dev     auto
    cannet  0
}

while { [llength $argv] > 0 } {
    set flag [lindex $argv 0]
    if {0 == [regexp "^-" $flag]} break
    set argv [lrange $argv 1 end]
    switch -- $flag {
        -v    { set opt(verbose) 1 }
        -i    { 
            set param [lindex $argv 0]
            check_for_following string
            set argv [lrange $argv 1 end]

            switch -glob $param {
                can[0-9] {
                    set opt(dev) $param
                    set opt(cannet) 1
                }
                -- -
                {} {
                    set opt(dev) can0
                    set opt(cannet) 1
                }
                * {
                    set opt(dev) $param
                    set opt(cannet) 0
                }
            }
        }
        -h -
        --help { show_help_and_die }
        --    { incr i; break }
        ^-      { die "unknown option: \"$flag\"" }
    }
}

set argv [string trim $argv \{\}]
set argc [llength $argv]

if {$argc != 1} {
    show_help_and_die
}

set node_id 0x[lindex $argv 0]

if {$node_id < 0x10 || $node_id > 0x14} {
    show_help_and_die
}

set state INIT
set cur_node_id 0
set start_timestamp 0

set test_count 10

proc id2nodeid {id} {
    return [expr $id & 0x7f]
}

proc id2type {id} {
    return [expr $id & 0xf80]
}

proc fsm {timestamp id size data {istimeout 0}} {
    global test_count
    global state node_id cur_node_id c dev
    global start_timestamp
    set oldstate $state

    if {$istimeout} {
        msg info "istimeout: $istimeout\n"
    } else {
        msg info "timestamp: $timestamp, id: $id, size: $size, data: $data\n"
    }

    switch $state {
        INIT {
            if {$id == 000} {
                set state WAIT_ID
            }
        }

        WAIT_ID {
            if {$istimeout} {
                # enter device to operational mode
                can_send {7e5#04000000.00000000}

                # reboot all devices what support NMT
                can_send {000#8100}

            } elseif {[id2type $id] == 0x700} {
                set cur_node_id [id2nodeid $id]
                msg info "cur_node_id: [format %x $cur_node_id]\n"

                # enter device to global mode
                can_send {7e5#04010000.00000000}

                # request node id
                can_send {7e5#5e000000.00000000}

                set state WAIT_REQUEST
            }
        }

        WAIT_REQUEST {
            if {$id == 0x7e4 && [expr 0x[lindex $data 0]] == 0x5e} {
                if {$cur_node_id == [expr 0x[lindex $data 1]]} {
                    msg note "set new addr\n"
                    can_send "7e5#11[format %02x $node_id].0000.0000.0000"
                    set start_timestamp $timestamp
                    set state WAIT_TO_STORE
                }
            }
        }
        WAIT_TO_STORE {
            if {$id == 0x7e4 && [expr 0x[lindex $data 0]] == 0x11} {
                set err [lindex $data 1]
                if {$err == 0} {
                    msg note "store new address... "
                    can_send "7e5#17.00.0000.0000.0000"
                    set state STORE_REPLY
                } else {
                    msg fail "LSS set new node ID error: $error, ext error: [lrange $data 2 end]\n"
                }
            }
        }
        STORE_REPLY {
            if {$id == 0x7e4 && [expr 0x[lindex $data 0]] == 0x17} {
                set err [expr 0x[lindex $data 1]]
                switch $err {
                    0 {
                        msg note "... store done\n"
                        #
                        # enter device to operational mode
                        can_send {7e5#04000000.00000000}

                        can_send {000#8100}
                        set state REBOOT
                    }
                    1 { msg fail "device do not support storage\n" }
                    2 { msg fail "problem with storage device, ext error: [lrange $data 2 4]\n" }
                }
            }
        }
        REBOOT {
            if {[id2type $id] == 0x700} {
                set cur_node_id [id2nodeid $id]
                if {$cur_node_id == $node_id} {
                    msg note "done. node id $node_id\n"
                    exit
                }
            }

        }
        - {
            msg note "not handled state $state\n"
        }
    }
    if {$oldstate != $state} {
        msg norm "$oldstate => $state\n"
    }
}

proc can_send {data} {
     upvar ::opt opt
     if {$opt(cannet)} {
         exec cansend $opt(dev) $data
     } else {
         send -- "$data\n"
     }
}

log_user 1
if {$opt(cannet)} {
	spawn candump -ta -cdx $opt(dev)
} else {
    stty -echo
    if {$opt(dev) == "auto"} {
        spawn ./canshell.py
        expect {USB-CAN Device ready}
    } else {
        msg fail "not implemented"
    }
}
log_user 0

# reboot all devices what support NMT
can_send {000#8100}

expect -timeout 1 -re {^ \((\d+)\.(\d+)\).* ([[:xdigit:]]{3}.*) (\[\d\])  *([^\n\r]+)\r?\n} {
    set timestamp $expect_out(1,string)$expect_out(2,string)
    set id        $expect_out(3,string)
    set size      $expect_out(4,string)
    set data      $expect_out(5,string)

    fsm $timestamp 0x$id $size $data

    exp_continue
} -re {^[^\n]+\n} {
    msg dbg "$expect_out(buffer)"
    exp_continue
} timeout {
    fsm {} 0x00 0 {} true
    exp_continue
} full_buffer {
    exp_continue
} eof {
} -i $user_spawn_id -re \003 {
    msg info exit\n
}


